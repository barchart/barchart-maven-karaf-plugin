<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!--

        Licensed to the Apache Software Foundation (ASF) under one or more
        contributor license agreements.  See the NOTICE file distributed with
        this work for additional information regarding copyright ownership.
        The ASF licenses this file to You under the Apache License, Version 2.0
        (the "License"); you may not use this file except in compliance with
        the License.  You may obtain a copy of the License at

           http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
    -->

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.barchart.base</groupId>
        <artifactId>barchart-archon</artifactId>
        <version>2.5.0</version>
        <relativePath />
    </parent>

    <groupId>com.barchart.maven</groupId>
    <artifactId>karaf-maven-plugin</artifactId>
    <version>3.0.0-build002</version>
    <packaging>maven-plugin</packaging>
    
    <name>Apache Karaf :: Tooling :: Maven Karaf Plugin</name>

	<scm>
		<url>https://github.com/barchart/barchart-maven-karaf-plugin</url>
		<connection>scm:git:git://github.com/barchart/barchart-maven-karaf-plugin.git</connection>
		<developerConnection>scm:git:ssh://git@github.com/barchart/barchart-maven-karaf-plugin.git</developerConnection>
		<tag>karaf-maven-plugin-3.0.0-build002</tag>
	</scm>

    <properties>
    
    	<projectKarafVersion>3.0.0.RC1</projectKarafVersion>
    	<projectPaxUrlVersion>1.5.2</projectPaxUrlVersion>
    	
    	<!-- Remote source repo -->
		<gitUrl>git://github.com/apache/karaf.git</gitUrl>

		<!-- Local source repo. -->
		<gitRepo>repo</gitRepo>

		<!-- Project module relative folder. -->
		<gitModule>tooling/karaf-maven-plugin</gitModule>

		<!-- Project module in the local repo. -->
		<gitModuleFolder>${gitRepo}/${gitModule}</gitModuleFolder>
    	
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-plugin-api</artifactId>
            <version>3.0.3</version>
        </dependency>
        <dependency>
           <groupId>org.sonatype.aether</groupId>
           <artifactId>aether-api</artifactId>
           <version>1.11</version>
         </dependency>
         <dependency>
           <groupId>org.sonatype.aether</groupId>
           <artifactId>aether-util</artifactId>
           <version>1.11</version>
         </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-artifact</artifactId>
            <version>3.0.3</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
            <version>3.0.3</version>
        </dependency>
        <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-compat</artifactId>
            <version>3.0.3</version>
        </dependency>


        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.4</version>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-filtering</artifactId>
            <version>1.0-beta-4</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-utils</artifactId>
            <version>1.5.10</version>
        </dependency>
        <dependency>
            <groupId>org.apache.felix</groupId>
            <artifactId>maven-bundle-plugin</artifactId>
            <version>2.3.7</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.felix</groupId>
                    <artifactId>org.apache.felix.bundlerepository</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.felix</groupId>
            <artifactId>org.apache.felix.fileinstall</artifactId>
            <version>3.2.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.features</groupId>
            <artifactId>org.apache.karaf.features.core</artifactId>
            <version>${projectKarafVersion}</version>
            <exclusions>
                <exclusion>
                    <artifactId>org.apache.karaf.shell.console</artifactId>
                    <groupId>org.apache.karaf.shell</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.url</groupId>
            <artifactId>pax-url-wrap</artifactId>
            <version>${projectPaxUrlVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.ops4j.pax.url</groupId>
            <artifactId>pax-url-aether</artifactId>
            <version>${projectPaxUrlVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.deployer</groupId>
            <artifactId>org.apache.karaf.deployer.spring</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.deployer</groupId>
            <artifactId>org.apache.karaf.deployer.blueprint</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.deployer</groupId>
            <artifactId>org.apache.karaf.deployer.features</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.deployer</groupId>
            <artifactId>org.apache.karaf.deployer.kar</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.karaf.kar</groupId>
            <artifactId>org.apache.karaf.kar.core</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.servicemix.bundles</groupId>
            <artifactId>org.apache.servicemix.bundles.ant</artifactId>
            <version>1.8.4_1</version>
        </dependency>
        <dependency>
          <groupId>org.apache.karaf.shell</groupId>
          <artifactId>org.apache.karaf.shell.console</artifactId>
            <version>${projectKarafVersion}</version>
        </dependency>
        <dependency>
            <groupId>org.osgi</groupId>
            <artifactId>org.osgi.core</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.xbean</groupId>
          <artifactId>xbean-finder-shaded</artifactId>
          <version>3.13</version>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <profiles>
    
        <profile>
            <id>ci-build-profile</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-invoker-plugin</artifactId>
                        <version>1.6</version>
                        <configuration>
                            <debug>true</debug>
                            <projectsDirectory>src/it</projectsDirectory>
                            <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
                            <pomIncludes>
                                <pomInclude>*/pom.xml</pomInclude>
                            </pomIncludes>
                            <postBuildHookScript>verify</postBuildHookScript>
                            <localRepositoryPath>${project.build.directory}/system</localRepositoryPath>
                            <!--<settingsFile>src/it/settings.xml</settingsFile>-->
                            <mavenOpts>-Djava.io.tmpdir=${project.build.directory}</mavenOpts>
                            <goals>
                                <goal>install</goal>
                            </goals>
                        </configuration>
                        <executions>
                            <execution>
                                <id>integration-test</id>
                                <goals>
                                    <goal>install</goal>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>xmlunit</groupId>
                                <artifactId>xmlunit</artifactId>
                                <version>1.3</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<!-- Get updated source. -->
		<profile>
			<id>clone</id>
			<build>
				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>clone</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
		<![CDATA[
		def baseDir = project.basedir
		def gitUrl = project.properties.gitUrl
		def gitRepo = project.properties.gitRepo
		
		def command
		def workDir
		if( new File("$gitRepo", ".git").exists() ){
			command = [ "git", "pull" ]
			workDir = new File("$gitRepo")
		} else{
			command = [ "git", "clone", gitUrl, gitRepo ]
			workDir = baseDir
		}
		
		// 		
		println "### command: ${command}"

		def builder = new ProcessBuilder(command).directory(workDir)
		def process = builder.start(); process.waitFor()

		// Process standard output..
		def stdText = "${process.in.text}"
		 
		// Process error output.
		def errText = "${process.err.text}"
		println "### result: ${errText}"
		
		if(errText.contains("error") || errText.contains("fatal")){
			throw new Exception("Git failed, see messages above. ")
		}
		]]>
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!-- Make local developer working copy from local Apache clone. -->
		<profile>
			<id>copy</id>
			<build>
				<plugins>
					<!-- Copy pom.xml, main and test source folders to working copy. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-src</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>${gitModuleFolder}/src/</directory>
										</resource>
									</resources>
									<outputDirectory>${basedir}/src/</outputDirectory>
									<overwrite>true</overwrite>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- Apply patches. -->
		<profile>
			<id>apply</id>
			<build>
				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>apply-patch</id>
								<phase>process-sources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
		<![CDATA[
		def baseDir = project.basedir
		def patchDir = new File(baseDir, "patch")
		
		def fileList = []
		patchDir.eachFileMatch (~/.*.patch/) { 
			file -> fileList.add(file.path) 
		}
			
		if( fileList.isEmpty() ) {
			println "### No patch files."
			return
		}

		def command = [ "git", "apply", "--verbose" ] + fileList
		println "### command: ${command}"
		
		def builder = new ProcessBuilder(command).directory(baseDir)
		def process = builder.start(); process.waitFor()

		def stdText = "${process.in.text}"
		def errText = "${process.err.text}"
		println "### result: ${errText}"
		
		if(errText.contains("error") || errText.contains("fatal")){
			throw new Exception("Git failed, see messages above. ")
		}
		]]>
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<!-- Produce git diff between Apache and Barchart. -->
		<profile>
			<id>diff</id>
			<build>
				<plugins>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>groovy-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>create-patch</id>
								<phase>process-sources</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<source>
		<![CDATA[
		def baseDir = project.basedir
		def patchDir = new File(baseDir, "patch")
		def patchFile = new File(patchDir, "current.patch")
		def gitModuleFolder = project.properties.gitModuleFolder
		def source = gitModuleFolder + "/src/"
		def target = "src/"
	
		def command = [ "git", "diff", "--relative", "--no-index",  "--", source, target ]
		println "### command: ${command}"
		
		def builder = new ProcessBuilder(command).directory(baseDir)
		def process = builder.start(); process.waitFor()
		
		def stdText = "${process.in.text}"
		def errText = "${process.err.text}" 
		println "### result: ${errText}"
		
		if(errText.contains("error") || errText.contains("fatal")) {
			throw new Exception("Git failed, see error messages above.")
		}

		patchFile.delete()
		
		if(stdText.isEmpty()){
			println "### No difference."
			return
		}
		
		// Format patch for sumbission to Apache.
		def diffText = stdText.replaceAll(gitModuleFolder,"")
		
		// Create patch file.
		patchFile.write(diffText)
		println "### Patch created: " + patchFile 
		]]>
									</source>
								</configuration>
							</execution>
						</executions>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>verify</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-invoker-plugin</artifactId>
						<configuration>
							<streamLogs>true</streamLogs>
							<projectsDirectory>${basedir}/src-main-it</projectsDirectory>
							<cloneProjectsTo>${basedir}/target/it</cloneProjectsTo>
							<pomIncludes>
								<path>test-aggregate-features/pom.xml</path>
							</pomIncludes>
							<postBuildHookScript>verify</postBuildHookScript>
							<goals>
								<goal>install</goal>
							</goals>
						</configuration>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<goal>install</goal>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>xmlunit</groupId>
								<artifactId>xmlunit</artifactId>
								<version>1.3</version>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
        
    </profiles>
    
    <reporting>
        <!--<outputDirectory>target/site</outputDirectory>-->
        <plugins>
            <plugin>
                <artifactId>maven-plugin-plugin</artifactId>
                <version>2.9</version>
            </plugin>
        </plugins>
    </reporting>

</project>
